uniform sampler2D u_Texture;
uniform vec3 u_diffColor;
uniform vec3 u_lightPos;

varying vec2 v_TexCoord;
varying vec3 v_Normal;
varying vec3 v_FragPos;

void main()
{
    
    // Set ambient light:
    vec3 ambient = vec3(0.2, 0.2, 0.2);

    // Calc normal of light to fragment:
    vec3 N = normalize(v_Normal);
    vec3 lightDir = normalize(u_lightPos - v_FragPos);

    // Check what faces are pointing away from the light / in shadow:
    float diff = max(dot(N, lightDir), 0.0);
    if(distance(u_lightPos, v_FragPos) > 200.0) diff = 0.0;
    vec3 diffuse = u_diffColor * diff;

    // If diffuse is higher than ambient, then apply it:
    vec3 light = max(diffuse, ambient);
    vec4 tex = texture2D(u_Texture, v_TexCoord);

    if(tex.a < 0.1)
        discard;

    // Set the color of fragment adherent to the light:
    gl_FragColor = tex * vec4(light, 1);
}



// if(distance(u_lightPos, v_FragPos) > 25.0) diff = 0.0;

// float atten = 20.0 - distance(u_lightPos, v_FragPos);
// atten = atten / 20.0;
// atten = min(atten, 1.0);
// diff *= atten;

// vec3 light = min(ambient + diffuse, 1.0);

