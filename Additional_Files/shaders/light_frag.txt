uniform sampler2D u_Texture;
uniform vec3 u_DiffColor;
uniform vec3 u_LightPos;
uniform vec3 u_ViewPos;
uniform vec3 u_SpecularColor;
uniform float u_GlowIntensity;
// uniform float u_SpecularIntensity;


varying vec2 v_TexCoord;
varying vec3 v_Normal;
varying vec3 v_FragPos;

void main()
{
    
    // Set ambient & specular light:
    vec3 ambient = vec3(0.2, 0.2, 0.2);

    // Calc normal of light to fragment:
    vec3 N = normalize(v_Normal);
    vec3 lightDir = normalize(u_LightPos - v_FragPos);

    // Check what faces are pointing away from the light / in shadow:
    float diff = max(dot(N, lightDir), 0.0);
    if(distance(u_LightPos, v_FragPos) > 200.0) diff = 0.0;
    vec3 diffuse = u_DiffColor * diff;

    // Calculate the specular using the view matrix, and the angle of reflection:
    vec3 viewDir = normalize(u_ViewPos - v_FragPos);
    vec3 reflectDir = reflect(-lightDir, v_Normal);
    float spec = pow(max(dot(viewDir, reflectDir), u_GlowIntensity), 32.0);
    vec3 specular = spec * u_SpecularColor;

    // If diffuse is higher than ambient, then apply it:
    vec3 light = max(diffuse, ambient) + specular;
    vec4 tex = texture2D(u_Texture, v_TexCoord);

    if(tex.a < 0.1)
        discard;

    // Set the color of fragment adherent to the light:
    gl_FragColor = tex * vec4(light, 1);
}



// if(distance(u_lightPos, v_FragPos) > 25.0) diff = 0.0;

// float atten = 20.0 - distance(u_lightPos, v_FragPos);
// atten = atten / 20.0;
// atten = min(atten, 1.0);
// diff *= atten;

// vec3 light = min(ambient + diffuse, 1.0);

