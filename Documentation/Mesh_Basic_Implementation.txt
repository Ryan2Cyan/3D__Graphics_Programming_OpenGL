// mesh.h:
#include <GL/glew.h>

struct Mesh{
    Mesh(int type);
    GLuint Id();

private:
    GLuint m_pos_vbo_id;
    GLuint m_vao_id; 
}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// mesh.cpp:
#include "mesh.h"

const GLfloat positions[] = {
    -1.0f, 1.0f, 0.0f,
    -1.0f, -1.0f, 0.0f,
    1.0f, -1.0f, 0.0f
};

Mesh:Mesh(int type){
    glGenBuffers(1, &m_pos_vbo_id);
    if(!m_pos_vbo_id) throw std::runtime_error("Failed to allocate positions VBO");
    glBindBuffer(GL_ARRAY_BUFFER, m_pos_vbo_id);
    glBufferData(GL_ARRAY_BUFFER, sizeof(positions), positions, GL_STATIC_DRAW);
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    glGenVertexArrays(1, &m_vao_id);
    if(!m_vao_id) throw std::runtime_error("Failed to allocate VAO");
    glBindVertexArray(m_vao_id);
    glBindBuffer(GL_ARRAY_BUFFER, m_pos_vbo_id);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, (void *)0);
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);
}

GLuint Mesh::Id(){
    return m_vao_id;
}

